Type define Sheet

Name: Lecture
Description: 강의, 이 자체로는 추상 클래스이지만, 프론트에서는 신경쓰지 않아도 됨, 또한 강의시간을 표현하는 방법을 4가지로 주었으나, DB 저장에 사용되는 하나를 제외한 나머지 3개 중 골라 쓰면 됨(어떤 게 적합할지 몰라 전부 준비함)
Item: {
	id: Long //DB id
	name: String
	classHours: String //아래 classHoursByList를 문자열로 만든 것으로, 사용하지 않음
	classHoursByList: List<Integer> // 월요일 0시부터 일요일 24시까지 일주일을 30분 단위로 쪼개어, 0은 월요일 00:00~00:30, 1은 월요일 00:30~01:00, 48은 화요일 00:00~00:30, 287은 토요일 23:30~24:00 같은 식으로 저장함
	classHoursByTimeList: List {
		day: java.time.DayOfWeek
		startTime: java.time.LocalTime
		endTime: java.time.LocalTime
	} //강의시간을 요일, 시작시각, 종료시각의 List로 저장
	classHoursByTimeStr: String // 강의시간을 사람이 보기 쉬운 형태로 만들어 놓음
}

Name: RegisteredLecture
Description: 학교에서 등록한 강의, Lecture를 상속함
Item: {
	id: Long //DB id
	name: String
	classHours: String //아래 classHoursByList를 문자열로 만든 것으로, 사용하지 않음
	classHoursByList: List<Integer> // 월요일 0시부터 일요일 24시까지 일주일을 30분 단위로 쪼개어, 0은 월요일 00:00~00:30, 1은 월요일 00:30~01:00, 48은 화요일 00:00~00:30, 287은 토요일 23:30~24:00 같은 식으로 저장함
	classHoursByTimeList: List {
		day: java.time.DayOfWeek
		startTime: java.time.LocalTime
		endTime: java.time.LocalTime
	} //강의시간을 요일, 시작시각, 종료시각의 List로 저장
	classHoursByTimeStr: String // 강의시간을 사람이 보기 쉬운 형태로 만들어 놓음
	//여기까지 Lecture에서 상속받은 내용
	credit: float //학점, 가능한 값은 0.5, 1, 2, 3, 4, 4.5, 5, 6, 6.5, 8, 9, 10
	grade: int //학년, 전체학년은 0으로 처리, 가능한 값은 0~6
	college: String //대학(원)/교양/연계/융합
	dept: String //학부(과)/전공/영역
	lectureCode: int //과목번호
	lectureSection: int //분반
	classification: enum Classification(GENERAL_EDUCATION, BASIC_MAJOR, MAJOR, REQUIRED_MAJOR, ELECTIVE_MAJOR, TEACHER_CERTIFICATE, TEACHING_MAJOR, ELECTIVE) //이수구분, 이 enum 값 중 하나만 저장함
	courseType: enum CourseType(NONE, OFFLINE, BLENDED, LIVE_VIDEO, MIXED, VIDEO) //수업유형, 이 enum 값 중 하나만 저장함
	lecturer: String
	lecturePlace: String
	remark: String
}

Name: CustomLecture
Description: 사용자가 직접 등록한 강의 또는 일정, 객체지향의 관점에서 Lecture 클래스와 분리했지만 추가적인 데이터는 일절 없음
Item: {
	id: Long //DB id
	name: String
	classHours: String //아래 classHoursByList를 문자열로 만든 것으로, 사용하지 않음
	classHoursByList: List<Integer> // 월요일 0시부터 일요일 24시까지 일주일을 30분 단위로 쪼개어, 0은 월요일 00:00~00:30, 1은 월요일 00:30~01:00, 48은 화요일 00:00~00:30, 287은 토요일 23:30~24:00 같은 식으로 저장함
	classHoursByTimeList: List {
		day: java.time.DayOfWeek
		startTime: java.time.LocalTime
		endTime: java.time.LocalTime
	} //강의시간을 요일, 시작시각, 종료시각의 List로 저장
	classHoursByTimeStr: String // 강의시간을 사람이 보기 쉬운 형태로 만들어 놓음
}

Name: LectureGroup
Description: Lecture(강의)의 묶음으로, 이 중에 강의를 몇 개를 선택하고, 또 다른 LectureGroup에서 이를 반복해, 시간이 겹치거나 Wizard 객체에 저장된  가능한 모든 시간표를 만듦
Item: {
	lectureList: List<Lecture>
	name: String
	numOfLecturePicks: int //선택하는 강의의 수
}

Name: GroupOfGroup
Description: LectureGroup을 한 번 더 감싸, LectureGroup의 조합을 가능하게 함
Item: {
	lectureGroups: List<LectureGroup>
	name: String
	numOfGroups: int //선택하는 LectureGroup의 수
	isLastPriority: boolean // 이거 하나는 사용하지 않음
}

Name: Wizard
Description: GroupOfGroup의 List와 시간표 생성 조건을 가지면서, 강의 목록과 시간표 생성 조건을 이용해 가능한 모든 시간표 조합을 생성할 수 있도록 함
Item: {
	groups: List<GroupOfGroup> //강의 집합(위의 클래스 형태로 가공된 상태)
	emptyDaysList :List<java.time.DayOfWeek> //공강 요일 설정(특정 요일), 일요일 제외
	numOfLeastEmptyDay: int //공강 일수 설정(요일 상관 없음)
	lectureStartTime: LocalTime //강의시작시각. 이 시간 이전에 시작하는 강의는 선택되지 않음.
	lectureEndTime: LocalTime //강의종료시각. 이 시간 이후에 끝나는 강의는 선택되지 않음.
	calculateSaturday: Boolean //공강 계산 시 토요일을 제외
	excludeVideoLecture: Boolean //영상강의를 모든 제한조건에서 제외
	excludeLivevideoLectureOnEmpty: Boolean //실시간 비대면 강의를 공강 조건에서만 제외
	excludeLivevideoLectureAll: Boolean //실시간 비대면 강의를 모든 조건에서 제외
	showAllLastPriority: Boolean //이거 하나는 사용하지 않음
}

Name: Timetable
Description: Wizard 실행의 결과로 나온 시간표
Item: {
	id: Long //DB id
	lectures: List<LectureTimetable>
	member: Member //시간표 저장 시에 사용, 시간표 주인
	viewOnlyKey: String //로그인을 하지 않아도 viewOnlyKey만 알면 시간표를 볼 수 있음
}

Name: LectureTimetable
Description: Timetable과 Lecture 다대다 mapping을 일대다 mapping 2개로 변경하는, timetable과 Lecture을 잇는 매개체, Timetable에 Cascade All, OrphanRemoval이 걸려 있음
Item: {
	id: Long //DB id
	lecture: Lecture
	timetable: Timetable
	isLastPriority: boolean //이거 하나는 사용하지 않음
}

Name: Member
Description: 회원, implements UserDetails
Item: {
	id: Long //DB id
	username: String //사용자가 설정하는 ID
	password: String //암호화된 pw
	timetables: List<Timetable> //이 member가 소유하고 있는 Timetable의 List
}

API 문서

EndPoint: GET /wizard/settings
Description: 시간표 마법사 설정(양식 반환), GroupOfGroup을 표시할 때는 그룹을 추가하는 버튼은 물론(클릭 시 GroupOfGroup 객체가 하나 더 생성되어야 하며, 이 객체는 하나의 LectureGroup 객체를 가지고 있음),
GroupOfGroup 각 객체별로 삭제 버튼과(누르면 해당하는 그룹이 List에서 삭제) LectureGroup 객체 추가 버튼, 그리고 이름과 numOfGroups(기본값 1)을 설정할 수 있는 필드, 그리고 가지고 있는 LectureGroup 클래스를 표시할 수 있는 공간이 독립적으로 존재하며,
이 안에 있는 LectureGroup 객체 또한 각 객체별로 삭제 버튼, 학교에서 등록한 강의 추가(검색) 버튼과 개인 일정(CustomLecture)을 추가할 수 있는 버튼, 그리고 그리고 이름과 numOfLecturePicks(기본값 1)을 설정할 수 있는 필드, 그리고 가지고 있는 Lecture을 표시할 수 있는 공간이 독립적으로 존재한다. (에타 마법사 UI나 마트료시카와 비슷하다)
강의 검색은 /search, 개인 일정 추가는 /addCustomLecture를 통해 시행할 수는 있지만, wizard, GroupOfGroup, LectureGroup 객체 모두 DB에 저장되지 않으므로, 캐시, url에 변수 형태로 저장, API 이용 등을 통해 기존에 작업했던 값을 불러올 수 있어야 한다.
(이걸 해결하지 못하면 설계 변경 필요)
Response Data: wizard: Wizard

EndPoint: POST /wizard/settings
Description: 시간표 마법사 설정으로 시간표 산출(모든 가능한 시간표 조합 생성)
Request Payload: wizard: Wizard
Response Data: result: List<Timetable>

EndPoint: POST /result/save
Description: 시간표 마법사 설정을 통해 산출된 시간표 중, 하나를 골라 저장
Request Payload: {
	timetable: Timetable //사용자가 선택한 시간표
	@AuthenticationPrincipal member: Member //사용자 정보는 스프링 시큐리티의 @AuthenticationPrincipal로 받을 예정
}
Response Data: boolean 또는 void //저장 시행

EndPoint: GET /search
Description: 학교에서 등록한 강의 검색 템플릿 반환
Response Data: searchEnrolledLecture: SearchEnrolledLecture

EndPoint: POST /search
Description: 입력된 데이터를 이용해 학교에서 등록한 강의 검색, 여기까지만 수행하고, 검색한 결과 중에서 Lecture를 Group에 추가하는 것은 통신 없이 프론트 내부에서 수행
Request Payload: searchEnrolledLecture: SearchEnrolledLecture
Response Data: result: List<RegisteredLecture>

EndPoint: GET /addCustomLecture
Description: 개인 일정 저장하는 템플릿 반환, 역시 classHours List 안에 있는 객체는 개별적으로 삭제와 값을 선택할 수 있는 기능을, 이외에도 전체적으로 객체를 더하는 버튼(전체 1개)이 존재함
Response Data: {
	name: String
	classHours: List {
		day: java.time.DayOfWeek
		startTime: java.time.LocalTime
		endTime: java.time.LocalTime
	}
}

EndPoint: POST /addCustomLecture
Description: 개인 일정 저장, 이 객체를 받아 lectureGroup에 추가할 수 있음
단 이때 반환된 객체는 Timetable을 저장하기 전까지 DB에 저장되지 않으므로, 이것도 캐시, url에 변수 형태로 저장 API 등을 활용해 값을 따로 저장해 두어야 함(Wizard 결과 구할 때는 사용하긴 하나 DB에 저장되지는 않은 상태)
Request Payload: {
	name: String
	classHours: List {
		day: java.time.DayOfWeek
		startTime: java.time.LocalTime
		endTime: java.time.LocalTime
	}
}
Response Data: customLecture: CustomLecture

EndPoint: GET /login
Description: 로그인 화면 가져오기
Response Data: {
	username: String //ID, 아무것도 입력되지 않은 상태
	password: String //PW, 아무것도 입력되지 않은 상태
}

Post /login (입력한 ID, PW 반환)은 스프링 시큐리티에서 해주니 스프링 시큐리티 양식에 맞추어야 함(벡엔드 개발 없음)

EndPoint: GET /signup
Description: 회원가입 화면 가져오기
Response Data: {
	username: String //ID, 아무것도 입력되지 않은 상태
	password1: String //PW, 아무것도 입력되지 않은 상태
	password2: String //PW 확인, 아무것도 입력되지 않은 상태
}

EndPoint: POST /signup
Description: 회원가입 입력 결과를 통해 Member 생성, 생성이 완료되면 직전에 있었던 위치로 돌아감
Request Payload: {
	username: String
	password1: String
	password2: String
}
Response Data: boolean 또는 void //저장 시행

GET /logout (로그아웃)은 스프링 시큐리티에서 해주니 스프링 시큐리티 양식에 맞추어야 함

EndPoint: GET /timetable/{ViewOnlyKey}
Description: Timetable의 ViewOnlyKey를 이용해, 로그인 없이 저장된 시간표 조회(시간표 수정, 삭제 버튼 없음)
Request Payload: {
	@PathVariable ViewOnlyKey: String
}
Response Data: result: Timetable

EndPoint: GET /timetable/byMember/{id}
Description: Timetable의 주인이 로그인을 한 상태일 때, Timetable의 DB id로 Timetable 조회(삭제 버튼 있음), 추가로 ViewOnlyKey 정보도 볼 수 있음
Request Payload: {
	@AuthenticationPrincipal member: Member //사용자 정보는 스프링 시큐리티의 @AuthenticationPrincipal로 받을 예정
	@PathVariable id: Long
}
Response Data: result: Timetable

EndPoint: DELETE /timetable/byMember/{id}
Description: Timetable의 주인이 로그인을 한 상태에서 Timetable 삭제
Request Payload: {
	@AuthenticationPrincipal member: Member //사용자 정보는 스프링 시큐리티의 @AuthenticationPrincipal로 받을 예정
	@PathVariable id: Long
}
Response Data: boolean 또는 void